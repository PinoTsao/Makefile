# Kbuild/Kconfig/kernel build 的笔记

## target flowchart

!!IMPORTANT!! 阅读 flowchart 前的 tips：
1. 假设编译发生在源码目录, 未定义KBUILD_SRC, 即没有 make O=
2. 假设基于 x86_64，且不是编译单个存在于单独文件夹下的 module,
   即未定义KBUILD_EXTMOD
3. 基于普通用户编译内核时最小白的方式：
   make menuconfig/[all]/modules_install/install/clean(or mrproper,disclean)
3. flowchart 中，以 # 开始的部分为注释； [] 为 reference
4. Makefile 执行流程的规则是深度优先
5. 假设命令行执行 make 时，除了 target，没有其他选项
6. target flowchart 只列出结果，详细分析在别处
7. 为防止 flowchart 纵向过长不便阅读等原因，一个大的 chart 会被分成多个 part
8. target 后面的字符： <*> 表示此 target 在 flowchart 中多次出现，为避免重复，
   在 chart 中对它的描述只会有一次，即是此处, 但未必是第一次出现的位置。

### make menuconfig 时

在 Top makefile 中：

config, %config<--|--scripts_basic
                  |        $(Q)$(MAKE) $(build)=scripts/basic # build fixdep & bin2c under scripts/basic
                  |        $(Q)rm -f .tmp_quiet_recordmcount
                  |
                  |--outputmakefile # 此 rule 只有在 `make O=` 时生效，掠过]
                  |
                  |-- [注： 这两个 -- 表示 target FORCE， 下同]

        $(Q)$(MAKE) $(build)=scripts/kconfig $@


在 scripts/kconfig/Makefile 中：

menuconfig<--|--$(obj)/mconf
        $< $(silent) $(Kconfig) # 即 scripts/kconfig/mconf Kconfig


### make(或者 make all) 时

在 Top makefile 中, 有一些对流程分析重要的代码需要知道，如下：

        # That's our default target when none is given on the command line
        _all:

        # 这些 -y 变量在 top Makefile 和 arch/x86/Makefile(head-y) 中定义, 此处不列出
	export KBUILD_VMLINUX_INIT := $(head-y) $(init-y) #
	export KBUILD_VMLINUX_MAIN := $(core-y) $(libs-y) $(drivers-y) $(net-y) $(virt-y)
	export KBUILD_LDS          := arch/$(SRCARCH)/kernel/vmlinux.lds
	vmlinux-deps := $(KBUILD_LDS) $(KBUILD_VMLINUX_INIT) $(KBUILD_VMLINUX_MAIN)
	
且经过 top Makefile 的处理，所有 -y 变量(除 head-y), 都被 evaluate 为 */built-in.o，
所以，vmlinux-deps 的值包含了完整路径的文件名。

part1:
_all<--|--all<--|--vmlinux--|--scripts/link-vmlinux.sh
                |           |
                |           |--vmlinux_prereq--|--$(vmlinux-deps)<*>--[part2]
                |           |                  |
                |           |                  |--FORCE
                |           |        # 根据.config 中的配置，
                |           |        # 有若干 recipe，省略
                |           |
                |           |--$(vmlinux-deps)
                |           |
                |           |--FORCE
                |           |
                |        +$(call if_changed,link-vmlinux)
                |
                |# 定义在 arch/x86/Makefile
                |--bzImage
                |
                |# .config 中配置 CONFIG_MODULES 时生效
                |--modules--|--$(vmlinux-dirs)
                            |
                            |--$(if $(KBUILD_BUILTIn),vmlinux)
                            |
                            |--modules.builtin
                            |
                       # modules recipe，省略


下面自然是分析所有 built-in.o 的生成，需要了解的相关代码：

	vmlinux-dirs    := $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
			   $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
                           $(net-y) $(net-m) $(libs-y) $(libs-m) $(virt-y)))
	# The actual objects are generated when descending,
	# make sure no implicit rule kicks in
	$(sort $(vmlinux-deps)): $(vmlinux-dirs) ;

part2:
$(vmlinux-deps)<--|--$(vmlinux-dirs)--|--prepare--|--prepare0--|--archprepare<--[part3]
                  |                   |           |            |
                  |                   |           |            |--gcc-plugins
                  |                   |           |            |
                  |                   |           |
                  |                   |           |       $(Q)$(MAKE) $(build)=.
                  |                   |           |       # Refer 顶层目录下的 Kbuild 文件来了解此 recipe 做的事情
                  |                   |           |
                  |                   |           |--prepare-objtool<--$(objtool_target) # tools/objtool
                  |                   |           |        NO RECIPE
                  |                   |           |
                  |                   |
                  |                   |
                  |                   |--scripts<--|--scripts_basic
                  |                   |            |
                  |                   |            |--include/config/auto.conf
                  |                   |            |
                  |                   |            |--include/config/tristate.conf
                  |                   |            |
                  |                   |            |--asm-generic
                  |                   |            |
                  |                   |            |--gcc-plugins
                  |                   |            |
                  |                   |        $(Q)$(MAKE) $(build)=$(@)
                  |                   |        # 这里的 $(@) 不常见，其实就是 $@
                  |                   |        # 编译 scripts/ 目录下的各种工具
                  |                   |
                  |        $(Q)$(MAKE) $(build)=$@
                  |        # descend into 每一个 vmlinux-dirs，编译相应的 built-in.o
                  |        # 后续有文章举例详细分析。
                  |

单独列出 gcc-plugins 的 rule 作参考：
gcc-plugins<--|--scripts_basic
              |
              |# gcc-plugins 相关流程完全不是重点, 略过.
              |--gcc-plugins-check
              |ifdef CONFIG_GCC_PLUGINS
              |        $(Q)$(MAKE) $(build)=scripts/gcc-plugins
              |endif

part3:
archprepare<--|--archheaders # 和下面的 archscripts 都定义在 arch/x86/Makefile 中
              |        $(Q)$(MAKE) $(build)=arch/x86/entry/syscalls all # [1]
              |
              |--archscripts<--|--scripts_basic<*>
              |                |        $(Q)$(MAKE) $(build)=scripts/basic # build fixdep & bin2c under scripts/basic
              |                |        $(Q)rm -f .tmp_quiet_recordmcount
              |                |
              |        # 显而易见，生成 arch/x86/tools 下的 relocs 工具
              |        $(Q)$(MAKE) $(build)=arch/x86/tools relocs
              |
              |--prepare1<--|--prepare2<--|--prepare3<--|--include/config/kernel.release<--|--include/config/auto.conf
              |             |             |             |                                  |# 详细描述见 prepare1 的 dependency
              |             |             |             |                                  |
              |             |             |             |                                  |--FORCE
              |             |             |             |                                  |
              |             |             |             |
              |             |             |             |        $(call filechk,kernel.release)
              |             |             |             |
              |             |             |        # Conditional RECIPE
              |             |             |
              |             |             |--prepare-compiler-check # stack protector 相关的check. 略过
              |             |             |
              |             |             |--outputmakefile # 仅当使用 make O= 时有效 
              |             |             |
              |             |             |--asm-generic # [2]
              |             |             |        [long_recipe_0]
              |             |             |        [long_recipe_1]
              |             |             |
              |             |        # NO RECIPE
              |             |
              |             |--$(version_h)<--$(srctree)/Makefile # [3]
              |             |        $(call filechk,version.h)
              |             |        $(Q)rm -f $(old_version_h)
              |             |
              |             |--include/generated/utsrelease.h<--|--include/config/kernel.release
              |             |                                   |# prepare3的依赖，所以此时已经存在
              |             |                                   |
              |             |                                   |--FORCE
              |             |                                   |
              |             |        $(call filechk,utsrelease.h)
              |             |
              |             |--include/config/auto.conf<*><--|--$(KCONFIG_CONFIG)
              |             |# match include/config/%.conf   |# .config, 由 make *config 生成
              |             |# Refer Q7 for details          |
              |             |                                |--include/config/auto.conf.cmd
              |             |                                |# 在 clean src build时, 此文件还不存在，
              |             |                                |# 也没有 rule match 此 target, 它在下面的
              |             |                                |# recipe 中生成，即 make silentoldconfig
              |             |                                |
              |             |        $(Q)$(MAKE) -f $(srctree)/Makefile silentoldconfig
              |             |        # silentoldconfig matches %config, refer Q6 for details
              |             |
              |        $(cmd_crmodverdir)
              |        # $(Q)mkdir -p $(MODVERDIR) $(if $(KBUILD_MODULES),; rm -f $(MODVERDIR)/*)
              |        # MODVERDIR 只有编译 KBUILD_EXTMOD 时才有值, 
              |        # 在我们的 assumptions 下（tip1,2），此 recipe 不做任何事情
              |
              |
              |--scripts_basic
              |


[long_recipe_0]: $(Q)$(MAKE) -f $(srctree)/scripts/Makefile.asm-generic src=asm obj=arch/$(SRCARCH)/include/generated/asm
[long_recipe_1]: $(Q)$(MAKE) -f $(srctree)/scripts/Makefile.asm-generic src=uapi/asm obj=arch/$(SRCARCH)/include/generated/uapi/asm

[1] 用来生成 arch/x86/include/generated/ 下的部分头文件。先 mkdir arch/x86/include/generated/asm/ 和 arch/x86/include/generated/uapi/asm/,
分别以 arch/x86/entry/syscalls 下的 syscall_64.tbl & syscall_32.tbl 作为 input, arch/x86/entry/syscalls 下的 syscallhdr.sh & syscalltbl.sh
作为工具处理上述 input, 生成：
arch/x86/include/generated/uapi/asm/unistd_32.h
arch/x86/include/generated/uapi/asm/unistd_x32.h
arch/x86/include/generated/uapi/asm/unistd_64.h
&
arch/x86/include/generated/asm/unistd_32_ia32.h (if defined CONFIG_X86_64)
arch/x86/include/generated/asm/unistd_64_x32.h (if defined CONFIG_X86_64)
arch/x86/include/generated/asm/syscalls_32.h
arch/x86/include/generated/asm/syscalls_64.h (if defined CONFIG_X86_64)
arch/x86/include/generated/asm/xen-hypercalls.h (if defined CONFIG_XEN)

[2] asm-generic 的处理流程
    每个 arch 有自己的专用的头文件, 位于 arch/$(SRCARCH)/include 目录, 此目录下还有 asm, uapi, generated 3个目录.
其中 generated 目录下面所有的目录和文件都是编译过程中创建的, 目录及部分文件是在 archheaders 的处理流程中完成.
本 target 负责生成其他的头文件. 在 include/asm-generic 目录下存放的是一些 common 的头文件, 如注释所说:
include/asm-generic contains a lot of files that are used verbatim by several architectures.
    本 target 的做的事情是在 generated 目录下创建一些 wrapper 文件, wrap include/asm-generic 下的一些文件，具体文件列表
由 arch/x86/include/asm/Kbuild & arch/x86/include/uapi/asm/Kbuild 说明。


[3] 首先， version_h = include/generated/uapi/linux/version.h
filechk 是一个 Multi-Line Variable，定义在 Kbuild.include 中。filechk 会先 mkdir target 中的目录，本例中也就是：
include/generated/uapi/linux 目录。然后创建临时文件，如果 target 不存在会创建；若 target 已存在，则比较target和临时文件
的内容，若内容不一致，则 mv 临时文件 target.
最后删除 $(old_version_h)，即 include/linux/version.h(不存在？？)

[4] 同[3]类似。
创建 target 中的目录 include/config，然后 call filechk。调用脚本 scripts/setlocalversion 处理
include/config/auto.conf 文件，生成了 include/config/kernel.release 文件。
然后同样的框架流程，生成了 include/generated/utsrelease.h


bzImage 的 flowchart:

bzImage<--|--vmlinux # in arch/x86/Makefile
          |
ifeq ($(CONFIG_X86_DECODER_SELFTEST),y)
        $(Q)$(MAKE) $(build)=arch/x86/tools posttest
endif
        $(Q)$(MAKE) $(build)=$(boot) $(KBUILD_IMAGE)
        $(Q)mkdir -p $(objtree)/arch/$(UTS_MACHINE)/boot
        $(Q)ln -fsn ../../x86/boot/bzImage $(objtree)/arch/$(UTS_MACHINE)/boot/$@

所以 key step 是 $(Q)$(MAKE) $(build)=$(boot) $(KBUILD_IMAGE)，下面是它的 flowchart:

# （src = obj = arch/x86/boot）
$(obj)/bzImage<--|--$(obj)/setup.bin<--|--$(obj)/setup.elf<--|--$(src)/setup.ld
                 |                     |                     |
                 |                     |                     |--$(SETUP_OBJS)
                 |                     |                     |# SETUP_OBJS 是一堆 .o 的集合，编译过程与其他.o一样。
                 |                     |                     |
                 |                     |                     |--FORCE
                 |                     |                     |
                 |                     |        # ld -T $(src)/setup.ld $(SETUP_OBJS) -o $@
                 |                     |        $(call if_changed,ld)
                 |                     |
                 |                     |--FORCE
                 |                     |
                 |        # objcopy -O binary setup.elf setup.bin
                 |        $(call if_changed,objcopy)
                 |
                 |--$(obj)/vmlinux.bin<--|--$(obj)/compressed/vmlinux<--|--FORCE
                 |                       |                              |
                 |                       |        # 生成 compressed 目录下的 vmlinux 文件。
                 |                       |        # 流程图在下面。文字分析见[5]
                 |                       |        $(Q)$(MAKE) $(build)=$(obj)/compressed $@
                 |                       |
                 |                       |
                 |                       |--FORCE
                 |                       |
                 |        # objcopy -O binary -R .note -R .comment -S ...
                 |        $(call if_changed,objcopy)
                 |
                 |--$(obj)/zoffset.h<--|--$(obj)/compressed/vmlinux
                 |                     |
                 |                     |--FORCE
                 |                     |
                 |        $(call if_changed,zoffset)
                 |
                 |--$(obj)/tools/build
                 |        # arch/x86/boot/tools/build 是一个 hostprogs。
                 |        # 以上面3个同级的 prerequisites 作为输入，将setup.bin
                 |        # 和 vmlinux.bin 写入 bzImage。
                 |
                 |--FORCE
                 |
        $(call if_changed,image)
        @$(kecho) 'Kernel: $@ is ready' ' (#'`cat .version`')'

在 arch/x86/boot/compressed/Makefile (默认 gzip 压缩)中：
# $(vmlinux-objs-y) 中，处理最复杂的是 piggy.o，此处只分析它，其他省略。
$(obj)/vmlinux<--|--$(vmlinux-objs-y)-piggy.o<--|--piggy.S<--|--vmlinux.bin.gz<--|--vmlinux.bin<--vmlinux(根目录下的)
                 |# 因为有 piggy.S 的 rule 存在， |            |                   |        # objcopy -R .comment -S ...
                 |# 所以 piggy.o match 了        |            |                   |        $(call if_changed,objcopy)
                 |# Makefile.build 中的 rule     |            |                   |
                 |# $(obj)/%.o: $(src)/%.S ...  |            |                   |--vmlinux.reloc<--vmlinux(根目录下的)
                 |                              |            |                   |# 此目标是可选项。由 arch/x86/tools/relocs
                 |                              |            |                   |# 处理 vmlinux 得到
                 |                              |            |                   |
                 |                              |            |        # 把 vmlinux.bin 和 [vmlinux.reloc] 压缩在一起
                 |                              |            |        $(call if_changed,gzip)
                 |                              |            |
                 |                              |            |--mkpiggy<--mkpiggy.c
                 |                              |            |# hostprogs，省略分析
                 |                              |            |
                 |                              |        # mkpiggy 工具生成 piggy.S， 该.S 包含了 vmlinux.bin.gz    
                 |                              |        $(call if_changed,mkpiggy)
                 |                              |
                 |        
                 |        
                 |
                 |--FORCE
                 |
        $(call if_changed,check_data_rel)
        $(call if_changed,ld)

[5] arch/x86/boot/compressed/vmlinux(下面以 vmlinux 指代) 的生成过程略复杂。
vmlinux 依赖所在目录下的一堆 .o 文件，这些 .o 来自 .c 或 .S。其中 piggy.o 来自 piggy.S,
piggy.S 是由工具 mkpiggy 处理 vmlinux.bin.<压缩> 生成， vmlinux.bin.<压缩> 由压缩 vmlinux.bin
和 vmlinux.relocs 得到，vmlinux.bin 是 objcopy vmlinux 的产物，vmlinux.relocs 由工具
arch/x86/tools/relocs 处理 vmlinux 得到。
此处由少量参考信息：https://github.com/0xAX/linux-insides/blob/master/Misc/how_kernel_compiled.md

现在，bzImage 已经生成，下面就可以 make install 了。install 也是定义在 arch/x86/Makefile 中
# boot=arch/x86/boot
install:
        $(Q)$(MAKE) $(build)=$(boot) $@

又进入到 arch/x86/boot/Makefile:

install:
        sh $(srctree)/$(src)/install.sh $(KERNELRELEASE) $(obj)/bzImage \
                System.map "$(INSTALL_PATH)"

所以 install 最终执行的命令是(KERNELRELEASE,INSTALL_PATH 在 top Makefile 中定义)：
arch/x86/boot/install.sh $(KERNELRELEASE) arch/x86/boot/bzImage System.map "$(INSTALL_PATH)"
如果系统中有 installkernel 的程序，则执行它来安装刚编译好的 kernel

### Modules 的编译过程

modules<--|--$(vmlinux-dirs)
          |
          |--$(if $(KBUILD_BUILTIN),vmlinux) # 就是vmlinux
          |# 上面两个 prerequisites 实际已经完成。所以重点是下面
          |# 的 modules.builtin
          |
          |--modules.builtin<--|--$(vmlinux-dirs:%=%/modules.builtin)
          |                    |# prerequisites 变成了 %/modules.builtin
          |                    |# match 下面的 rule
          |                    |
          |        $(Q)$(AWK) '!x[$$0]++' $^ > $(objtree)/modules.builtin
          |
        $(Q)$(AWK) '!x[$$0]++' $(vmlinux-dirs:%=$(objtree)/%/modules.order) > $(objtree)/modules.order
        @$(kecho) '  Building modules, stage 2.';
        $(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost
        $(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_modbuild


%/modules.builtin: include/config/auto.conf
        $(Q)$(MAKE) $(modbuiltin)=$*

扩展开来就是：

%/modules.builtin: include/config/auto.conf
        make -f $(srctree)/scripts/Makefile.modbuiltin obj=% # 这个 % 实际是 vmlinux-dirs 中的每个 dir

modules.builtin 文件似乎只是收集了(各目录下)被 builtin 的模块信息，最后汇总为根目录下的 modules.builtin 文件。
scripts/Makefile.modbuiltin 中 include 了 auto.conf 和 tristate.conf，这两个conf的关系很微妙，其中有重复的
CONFIG_ 变量， 但 tristate.conf 将覆盖 auto.conf。所以在此 makefile 中会使用 obj-Y 变量.

modules.order 文件在编译 vmlinux 时经 Makefile.build 文件中的 target modorder-target 创建。
并且 Makefile.lib 中有：

    modorder := $(patsubst %/,%/modules.order, $(filter %/, $(obj-y)) $(obj-m:.o=.ko))

每一个目录下 modorder 变量值根据同级的 Makefile 中obj-y, obj-m 来确定，要么是 subdir 下的 modules.order,
要么是 <module_name>.ko

modpost(Makefile.modpost) 的处理流程：(_modpost 是 default goal)
_modpost<--|--__modpost$: (modules:.ko=.o)<--FORCE
           |        $(call cmd,modpost) $(wildcard vmlinux) # 见下方[注释]
           |
           |# KBUILD_MODPOST_NOFINAL 一般情况不会定义，所以此句等于 $(modules)
           |# modules=所有的.ko
           |--$(if $(KBUILD_MODPOST_NOFINAL), $(modules:.ko:.o),$(modules))
           |==$(modules): %.ko :%.o %.mod.o
           |        +$(call if_changed,ld_ko_o) # 将模块的.o 和 .mod.o 文件链接为 .ko 文件

[注释]
scripts/mod/modpost 程序处理所有 module 的 .o 和 vmlinux 文件，为每一个 module 生成一个 .mod.c 文件，
还生成$(objtree)/Module.symvers 文件。.mod.c 文件和其对应 module 的 .o 文件一起链接生成 .ko 文件。


### Make clean;mrproper;disclean

目标 clean 在 top Makefile 中的定义在空间上跨越很大,不易厘清

    ifeq ($(KBUILD_EXTMOD),)
        ifdef CONFIG_MODULES
        else # !CONFIG_MODULES
        endif # CONFIG_MODULES

    clean: bluhbluh
    mrproper: bluhbluh

    else # has KBUILD_EXTMOD
    endif # KBUILD_EXTMOD

    clean: bluhbluh

target "clean" use target-specific variables:
        rm-dirs  := $(CLEAN_DIRS)
        rm-files := $(CLEAN_FILES)

target "mrproper" use target-specific variables:
        rm-dirs  := $(wildcard $(MRPROPER_DIRS))
        rm-files := $(wildcard $(MRPROPER_FILES))

cmd_rmdirs = rm -rf $(rm-dirs)
cmd_rmfiles = rm -f $(rm-files)


$(clean) is defined in Kbuild.include as
        clean := -f $(srctree)/scripts/Makefile.clean obj

clean<--|--archclean # 定义在 arch/x86/Makefile 中
        |        $(Q)rm -rf $(objtree)/arch/i386
        |        $(Q)rm -rf $(objtree)/arch/x86_64
        |        $(Q)$(MAKE) $(clean)=$(boot)
        |        $(Q)$(MAKE) $(clean)=arch/x86/tools
        |        $(Q)$(MAKE) $(clean)=arch/x86/purgatory
        |
        |# clean-dirs := $(addprefix _clean_, . $(vmlinux-alldirs) Documentation samples)
        |--vmlinuxclean
        |        $(Q)$(CONFIG_SHELL) $(srctree)/scripts/link-vmlinux.sh clean
        |        $(Q)$(if $(ARCH_POSTLINK), $(MAKE) -f $(ARCH_POSTLINK) clean)
        |
        |--$(clean-dirs)
        |        $(Q)$(MAKE) $(clean)=$(patsubst _clean_%,%,$@)
        |
       $(call cmd,rmdirs)
       $(call cmd,rmfiles)
       @find $(if $(KBUILD_EXTMOD), $(KBUILD_EXTMOD), .) $(RCS_FIND_IGNORE) \
               \( -name '*.[oas]' -o -name '*.ko' -o -name '.*.cmd' \
               -o -name '*.ko.*' \
               -o -name '*.dwo'  \
               -o -name '*.su'  \
               -o -name '.*.d' -o -name '.*.tmp' -o -name '*.mod.c' \
               -o -name '*.symtypes' -o -name 'modules.order' \
               -o -name modules.builtin -o -name '.tmp_*.o.*' \
               -o -name '*.c.[012]*.*' \
               -o -name '*.gcno' \) -type f -print | xargs rm -f

关于target name: mrproper 的来历:
https://0x657573.wordpress.com/2011/01/03/what-does-mrproper-in-make-mrproper-stand-for/
http://www.neatorama.com/2007/09/15/the-many-names-of-mr-clean/
https://lists.gt.net/linux/kernel/178306

mrproper<--|--clean
           |
           |--archmrproper # NULL for x86
           |
           |# mrproper-dirs := $(addprefix _mrproper_,Documentation/DocBook scripts)
           |--$(mrproper-dirs)
           |        $(Q)$(MAKE) $(clean)=$(patsubst _mrproper_%,%,$@)
           |
        $(call cmd,rmdirs)
        $(call cmd,rmfiles)

distclean<--mrproper
                @find $(srctree) $(RCS_FIND_IGNORE) \
                \( -name '*.orig' -o -name '*.rej' -o -name '*~' \
                -o -name '*.bak' -o -name '#*#' -o -name '.*.orig' \
                -o -name '.*.rej' -o -name '*%'  -o -name 'core' \) \
                -type f -print | xargs rm -f


### linux kernel 编译概述

kernel 编译是 per directory 的. 为什么这么说? 由Makefile 可知, 所有的真正编译动作的入口长这个样子:

        $(Q)$(MAKE) $(build)=$@

也就是进入了 Makefile.build 中进行后面的编译动作. 在 Makefile.build 中又依次 include 了:

scripts/Kbuild.include
目标 directory 中的 Makefile
scripts/Makefile.lib
scripts/Makefile.host # 如果有定义 hostprogs-y

"目标 directory 的 Makefile" 中的主要内容是 obj-y, obj-m 的定义,
Makefile.lib 对这些定义进行了进一步的处理,
比如: 筛出 composite object; 挑出 subdir, Descend 进去, recursive 的进行:

        $(Q)$(MAKE) $(build)=$@

每一个目录下的 Makefile 中的 obj-y 定义的是要被编译进该目录下的built-in.o 的所有 .o 的集合

obj-y, obj-m 中的 composite object, 都可以被看作 module. 不同的是, obj-y 中的 composite object 被放入 built-in.o,
所以, module的意义实际上是 function module. 而 obj-m 中的内容本来就是要被编译成 kernel module 的, 即 .ko 文件.

----------------------------------------------------------------------------------------------------------
$(multi-objs-m)         : modname = $(modname-multi)

modname-multi = $(sort $(foreach m,$(multi-used),\
                $(if $(filter $(subst $(obj)/,,$*.o), $($(m:.o=-objs))
$($(m:.o=-y))),$(m:.o=))))

modname-multi 的值是 composite object 的名字去掉 .o 后缀.

multi-used-y 是所有 obj-y 中 的 composite object; 同理 multi-used-m 是所
有 obj-m 中的 composite object. multi-used 是二者之和.
multi-objs-y 是 obj-y 中所有的 composite object 所包含的 .o 集合; 同
理,multi-objs-m 是 obj-m 中所有的 composite object 所包含的 .o 集合;
multi-objs 是二者之和;

------------------------------------------------------------------------------------------------------------

Q1： arch/x86 目录下编译流程分析
Makefile
$(vmlinux-dirs): prepare scripts
         $(Q)$(MAKE) $(build)=$@
----->
arch/x86: xxx yyy
         make -f $(srctree)/scripts/Makefile.build obj=arch/x86

scripts/Makefile.build
src=obj=kbuuild-dir = arch/x86
kbuild-file = arch/x86/Kbuild

Makefile.lib
arch/x86/Kbuild 中定义的 obj-y 都是目录(arch/x86 下的子目录), obj-y=entry/ realmode/ kernel/ mm/ crypto/ platform/ net/ 等等
经过处理:
obj-y := $(patsubst %/, %/built-in.o, $(obj-y)), 将 obj-y 中的目录, 变为 entry/built-in.o kernel/built-in.o mm/built-in.o 等,其余不变
subdir-ym := $(sort $(subdir-y) $(subdir-m)), subdir-ym 的值是 arch/x86下的子目录名, 也即 entry realmode kernel mm 等等
subdir-obj-y := $(filter %/built-in.o, $(obj-y)), subdir-obj-y 的值是所有的 foo/built-in.o
obj-dirs := $(dir $(multi-objs) $(obj-y)), obj-dirs 的值是最初 obj-y 的定义 entry/ realmode/ kernel/ 等等
最后给上面的变量都加上$(obj), 即 arch/x86 作为前缀

回到Makefile.build
__build: $(if $(KBUILD_BUILTIN),$(builtin-target) $(lib-target) $(extra-y)) \
          $(if $(KBUILD_MODULES),$(obj-m) $(modorder-target)) \
          $(subdir-ym) $(always)
--->
__build: arch/x86/built-in.o entry realmode kernel mm [expand from subdir-ym]

# To build objects in subdirs, we need to descend into the directories
$(sort $(subdir-obj-y)): $(subdir-ym) ;
$(subdir-ym):
         $(Q)$(MAKE) $(build)=$@
由此看出, 将对 subdir 进行 recursive 的 build, 直到最底层的文件夹. 每一层文件夹下的所有 .o 文件被链接成 built-in.o 文件.
这里有一个小的key point就是, 在每一层文件夹下 build 时, obj-y 的值在 Makefile.lib 中被处理为当前文件夹下所有 .o 和子文件夹下的built-in.o

Q2： init/Makefle 中的 mounts-y 是如何被编译到的?
the magic 在 Makefile.lib 中的这句:
# if $(foo-objs) exists, foo.o is a composite object
multi-used-y := $(sort $(foreach m,$(obj-y), $(if $(strip $($(m:.o=-objs)) $($(m:.o=-y))), $(m))))
obj-y 在 init/Makefile中被赋值, 其中有一个是 mounts.o, 但是不存在对应的 mount.c, mounts.o 其实是由$(mounts-y)中的文件一起编译而来, 所以它是一个 composite object
所以 multi-used-y = mounts.o, 因为存在 mounts-y. 所以multi-used = mounts.o, 再经过 addprefix 操作, multi-used-y = init/mounts.o
因为 multi-objs-y := $(foreach m, $(multi-used-y), $($(m:.o=-objs)) $($(m:.o=-y))) , 所以 multi-objs-y = $(mounts-y), 再经过 addprefix 操作, multi-objs-y = init/$(mounts-y)
重点来了, Makefile.build 中有如下代码
$(multi-used-y): FORCE
        $(call if_changed,link_multi-y)
$(call multi_depend, $(multi-used-y), .o, -objs -y) # 重点之一, multi_depend 中使用了 eval 函数, 定义了一条 rule 用来描述 $(multi-used-y) 的依赖关系, 这个rule 由 multi_depend生成, 长这样 $(multi-used-y): 所有依赖的.o 文件
所以, 和上面的 $(multi-used-y): FORCE 是同一个target, 同一个target的 rule会被合并, prerequisite 会被合并, 然后在 变量 link_multi_deps 的 $^ 中, 就是合并后的所有 prerequisites

Q3: make *config 的产物只是 .config 吗？
是

Q4. bzImage 是什么，又是如何生成的？

Q5. Empty recipes 和 Force target 的关系，区别？

在GNU make 文档中，FORCE target 的定义是：

	If a rule has no prerequisites or recipe, and the target of the rule is a nonexistent file,
	then `make' imagines this target to have been updated whenever its rule is run.

形式是
	FORCE:

Empty recipe 的形式是
	target: ;

二者看起来很像，怀疑 Empty recipe 的 target 其实也是 FORCE target。“3.6 Overriding Part of Another Makefile” 中的例子可以确认这一点。
另外，可以通过下面的小例子来证明一下：

	hello: hello.c FORCE
        	gcc hello.c -o hello

	FORCE: hello.c
		@echo FORCE

先执行一次 make, 生成 target "hello"，分别做如下修改，再 make, 通过查看 hello 的修改时间便可确认。
1. target FORCE 的 prerequisite 为空
2. target FORCE 的 recipe 为空
3. 修改成 Empty recipe 的样子
4. 声明 FORCE 为 PHONY target

Q6. 目标 silentoldconfig 的处理流程?
因为 target include/config/auto.conf match 了下面的 rule

include/config/%.conf: $(KCONFIG_CONFIG) include/config/auto.conf.cmd
         $(Q)$(MAKE) -f $(srctree)/Makefile silentoldconfig

所以, 有必要分析下 silentoldconfig 的处理流程细节.

在 scripts/kconfig/Makefile 中有如下代码:
silentoldconfig: $(obj)/conf
        $(Q)mkdir -p include/config include/generated
        $(Q)test -e include/generated/autoksyms.h || \
            touch   include/generated/autoksyms.h
        $< $(silent) --$@ $(Kconfig)

可以看出, silentoldconfig 依赖于 scripts/kconfig/conf, 下面分析 conf 的生成过程.
conf-objs       := conf.o  zconf.tab.o  # 但其实没有 zconf.tab.c 文件, 需要生成
hostprogs-y := conf nconf mconf kxgettext qconf gconf

$(obj)/zconf.tab.o: $(obj)/zconf.lex.c $(obj)/zconf.hash.c  # prerequisites中的2个 .c 也是不存在的, 也需要生成

target $(obj)/zconf.tab.o match 了 Makefile.build 中的这条最常用的 rule:

$(obj)/%.o: $(src)/%.c $(recordmcount_source) $(objtool_obj) FORCE

说明 $(obj)/zconf.tab.o 也依赖于 $(obj)/zconf.tab.c.  关于target $(obj)/zconf.tab.o 的 两条 rule 合并在一起(合并 prerequisites),
它的 prerequisites 变成了:  $(obj)/zconf.tab.c  $(obj)/zconf.lex.c  $(obj)/zconf.hash.c, 这三个文件并不存在, 所以要找到生成他们的 rule.
在 Makefile.lib 有这么一条 rule, 可以 match 这三个 target 文件:

$(obj)/%: $(src)/%_shipped
        $(call cmd,shipped)

直接用cat转换了下后缀名, shipped 文件变成了 .c 文件.
这里的trick是:  zconf.tab.c 中 include 了很多 .c 文件!!!
#include "zconf.hash.c"
#include "zconf.lex.c"
#include "util.c"
#include "confdata.c"
#include "expr.c"
#include "symbol.c"
#include "menu.c"
所以 这些 .c 文件不会被编译

宗上, silentoldconfig 的实际结果是 /scripts/kconfig/conf --silentoldconfig Kconfig
在代码 scripts/kconfig/conf.c 中有如下comment:
/* silentoldconfig is used during the build so we shall update autoconf.
 * All other commands are only used to generate a config.
 */

Q7. include/config/auto.conf ，include/config/tristate.conf， include/config/auto.conf.cmd 等文件是如何生成的？
这两个以及其他若干文件是在 `make silentoldconfig` 的过程中生成的. 由Q6可知，目标 silentoldconfig 会创建
include/config & include/generated 目录，最终执行的命令是 scripts/kconfig/conf --silentoldconfig Kconfig.
由可执行程序 conf 的 main 函数(conf.c)可以看到， 只有在 silentoldconfig 时， 才会调用函数 conf_write_autoconf，
这个函数就是关键所在了，在此函数中，会生成:
include/config/auto.conf.cmd

include/generated/autoconf.h
include/config/tristate.conf
include/config/auto.conf

每次更新 .config 后去重新 make 时，都会更新上面倒数3个文件。

Q8. Makefile.build 中 modorder-target 的 recipe，
scripts/Makefile.modbuiltin 中 modbuiltin-target 的 recipe 结果怎么得到的？

Q9. 一个模块(.ko)是如何编译出来的？


Q10. extra-y 的.o 被放到哪儿去了?


Q11. obj-y, obj-m 中的 .o 的编译选项的变量的使用说明?

Q12. 如何判断一个 .c 文件所依赖的所有 .h 文件？
理论说明： 4.14 Generating Prerequisites Automatically

Q13. recipe 前面的 special prefix character "@", "-", "+" 是什么意思？
Refer: https://stackoverflow.com/questions/3477292/what-do-and-do-as-prefixes-to-recipe-lines-in-make

    @ suppresses the normal 'echo' of the command that is executed.

    - means ignore the exit status of the command that is executed (normally, a non-zero exit status would stop that part of the build).

    + means 'execute this command under make -n' (when commands are not normally executed).

Q14. Host program: fixdep
scripts/basic/fixdep.c 文件头的描述对它的作用做了详细的描述，必看！
可以通过观察 init/.main.o.d 和 init/.main.o.cmd，人眼比对，可以验证程序的行为。

scripts/basic/fixdep.c 中 hash 表的实现有个小tips，就是 Hash value 相同的 item 会构成一个 hash bucket
(hash bucket 的存在是为了解决 Hash value 冲突，可以搜索它来了解基本概念)

                [Input]
                   |
                   +
            [Hash Function]
                   |
     -----------------------------
    /         /         \         \
[Hvalue1] [Hvalue2] [Hvalue3] [Hvalue4]
   1          1
   2                    2 
   3

每一个 Hvalue* 下面是一个链表，叫做 hash bucket，保存着相同 hash value 的 item。单项链表，后插入的在链表头部。
